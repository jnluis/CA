def calculate_d(totient, e):
    """Calculate the private key (d) using the Extended Euclidean Algorithm
    d * e ≡ 1 (mod φ(n))
    """

    def extended_gcd(a, b):
        if a == 0:
            return b, 0, 1
        gcd, x1, y1 = extended_gcd(b % a, a)
        x = y1 - (b // a) * x1
        y = x1
        return gcd, x, y

    # Calculate d using Extended Euclidean Algorithm
    gcd, x, y = extended_gcd(e, totient)

    # Make sure d is positive
    d = x % totient
    if d < 0:
        d += totient

    return d


# Example usage
def main():
    # Example values
    a
    a_certo = a.replace(" ", "")

    b
    b_certo = b.replace(" ", "")

    euler_phi
    totient = euler_phi.replace(" ", "")

    e = 65537

    # Calculate private key
    d = calculate_d(int(totient), e)

    print(f"Private key d = {d}")

    # Verify that (d * e) mod totient = 1
    verification = (d * e) % int(totient)
    print(f"Verification (should be 1): {verification}")


if __name__ == "__main__":
    main()
