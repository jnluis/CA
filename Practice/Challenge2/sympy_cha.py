from sympy.ntheory import discrete_log
from sympy.ntheory.factor_ import factorint

# Values for Diffie-Hellman
p = 9459040338068898689261456459355656735760126665215411768729930709057649580926326656219024573411869732770921533628486688534108189813533765746159096301632668722327
r = 5
A = 4273882268770451042535779967439697351016686492206027478809543375227950930138924865543470033644860424586440579542980690863469253402996371905611340139885738693080
B = 3847640689624364711664886026800290793265399414700736841705321414309213654447740358930872088921683993690069628098925077346749794347163383463395658935649932413838

p_minus_1 = p - 1
# factorization = factorint(p_minus_1)
factorization = {
    2: 1,
    5531790401440711: 1,
    7456838241168989: 1,
    8515259982369671: 1,
    8745786245782841: 1,
    9499742089305047: 1,
    9700182083860057: 1,
    10364391344477629: 1,
    11426445140881751: 1,
    11607899603171899: 1,
    12153450212629753: 1,
}

a = discrete_log(p, A, r)
print(f"Private key 'alpha': {a}")

# Compute the shared key K using B and a
shared_key = pow(B, a, p)

print(f"Shared key: {shared_key}")

# 2×5531790401440711×7456838241168989×8515259982369671×8745786245782841×9499742089305047×9700182083860057×10364391344477629×11426445140881751×11607899603171899×12153450212629753 (11 distinct prime factors)
